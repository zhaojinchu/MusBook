

# File: cs_nea/manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cs_nea.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


# File: cs_nea/templates/_base.html
{% load static %} {% load static tailwind_tags %}

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>NEA</title>
        {% tailwind_css %}
        <script
            defer
            src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.1/dist/cdn.min.js"
        ></script>
    </head>

    <body class="bg-neutral-200" x-data="{ sidebarOpen: true }">
        <div>
            <header class="sticky top-0 z-50">
                <div
                    class="flex fixed top-0 py-2 w-full items-center justify-between bg-neutral-800 bg-opacity-95 backdrop-blur shadow-md"
                >
                    <!-- Left -->
                    <div
                        class="flex flex-grow gap-x-10 px-10 text-lg text-white py-2.5"
                    >
                        {% if "home" or "password_reset" in request.path %}
                        <div class="flex font-semibold">
                            <a
                                href="{% url 'index' %}"
                                class="hover:text-purple-400"
                                >Home</a
                            >
                        </div>
                        {% endif %} {% block navleft %}{% endblock navleft %} {% if user.is_authenticated %}
                        <div class="flex">
                            <a
                                href="{% url 'dashboard' %}"
                                class="hover:text-purple-400"
                                >Dashboard</a
                            >
                        </div>
                        {% endif %}
                    </div>

                    <!-- Auto dissapearing messages -->
                    <div
                        id="messages-container"
                        class="fixed left-1/2 transform -translate-x-1/2 z-50 w-full max-w-md px-4"
                    >
                        <div class="w-full pt-2">
                            {% for message in messages %}
                            <div
                                class="message px-4 py-3 rounded-md shadow-sm mb-2 flex items-center justify-between {% if message.tags == 'error' %} bg-red-100 border border-red-400 text-red-700 {% else %} bg-green-100 border border-green-400 text-green-700 {% endif %}"
                                role="alert"
                            >
                                <span class="flex-grow">{{ message }}</span>
                                <button
                                    onclick="dismissMessage(this.parentNode)"
                                    class="ml-4 focus:outline-none"
                                >
                                    <svg
                                        class="h-5 w-5"
                                        xmlns="http://www.w3.org/2000/svg"
                                        viewBox="0 0 20 20"
                                        fill="currentColor"
                                    >
                                        <path
                                            fill-rule="evenodd"
                                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                                            clip-rule="evenodd"
                                        />
                                    </svg>
                                </button>
                            </div>
                            {% endfor %}
                        </div>
                    </div>

                    <script>
                        document.addEventListener(
                            "DOMContentLoaded",
                            function () {
                                const messages = document.querySelectorAll(
                                    "#messages-container .message"
                                );
                                messages.forEach((message) => {
                                    setTimeout(() => {
                                        dismissMessage(message);
                                    }, 10000);
                                });
                            }
                        );

                        function dismissMessage(messageElement) {
                            messageElement.style.transition =
                                "opacity 300ms, transform 300ms";
                            messageElement.style.opacity = "0";
                            messageElement.style.transform = "scale(0.9)";
                            setTimeout(() => {
                                messageElement.remove();
                            }, 300);
                        }
                    </script>
                
                    <!-- Right -->
                    <div class="flex gap-x-6 px-6">
                        {% block navright %}{% endblock navright %} 
                        {% if user.is_authenticated %}
                        <div
                            x-data="{ open: false }"
                            class="relative inline-block text-left mr-4"
                        >
                            <div>
                                <button
                                    @click="open = !open"
                                    type="button"
                                    class="inline-flex justify-center w-full rounded-md shadow-sm px-4 py-2 bg-purple-500 text-sm font-medium text-white hover:bg-purple-600 ring-purple-800"
                                    id="options-menu"
                                    aria-haspopup="true"
                                    x-bind:aria-expanded="open"
                                >
                                    {{ user.first_name }} {{ user.last_name }}
                                    <svg
                                        class="-mr-1 ml-2 h-5 w-5"
                                        xmlns="http://www.w3.org/2000/svg"
                                        viewBox="0 0 20 20"
                                        fill="currentColor"
                                        aria-hidden="true"
                                    >
                                        <path
                                            fill-rule="evenodd"
                                            d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                            clip-rule="evenodd"
                                        />
                                    </svg>
                                </button>
                            </div>

                            <div
                                x-show="open"
                                @click.away="open = false"
                                class="origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-neutral-100"
                            >
                                <div
                                    class="py-1"
                                    role="menu"
                                    aria-orientation="vertical"
                                    aria-labelledby="options-menu"
                                >
                                    <a
                                        href="{% url 'settings' %}"
                                        class="block px-4 py-2 text-sm hover:bg-neutral-200 text-neutral-800"
                                        role="menuitem"
                                        >Settings</a
                                    >
                                    <a
                                        href="{% url 'user_profile' %}"
                                        class="block px-4 py-2 text-sm hover:bg-neutral-200 text-neutral-800"
                                        role="menuitem"
                                        >Profile</a
                                    >
                                    <a
                                        href="{% url 'logout' %}"
                                        class="block px-4 py-2 text-sm hover:bg-neutral-200 text-neutral-800"
                                        role="menuitem"
                                        >Log out</a
                                    >
                                </div>
                            </div>
                        </div>
                        {% endif %}
                    </div>
                </div>
            </header>

            <main class="relative">
                <!-- Content -->
                {% block content %} {% endblock content %}
            </main>

            <footer></footer>
        </div>

        <script
            defer
            src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.1/dist/cdn.min.js"
        ></script>
    </body>
</html>


# File: cs_nea/templates/_dashboard.html
{% load static %} {% load static tailwind_tags %}

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>NEA</title>
    {% tailwind_css %}
    <script
      defer
      src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.1/dist/cdn.min.js"
    ></script>
  </head>

  <body class="bg-neutral-200" x-data="{ sidebarOpen: true }">
    <div>
      <header class="sticky top-0 z-50">
        <div
          class="flex fixed top-0 py-2 w-full items-center justify-between bg-neutral-800 bg-opacity-95 backdrop-blur shadow-md"
        >
          <!-- Left -->
          <div class="flex flex-grow gap-x-10 px-10 text-lg text-white py-2.5">
            {% if "home" in request.path %}
            <div class="flex font-semibold">
              <a href="{% url 'index' %}" class="hover:text-purple-400">Home</a>
            </div>
            {% endif %}
            <!-- Sidebar Button -->
            {% if user.is_authenticated %}
            <button
              @click="sidebarOpen = !sidebarOpen"
              class="text-white focus:outline-none"
            >
              <svg
                class="h-6 w-6"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M4 6H20M4 12H20M4 18H11"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                ></path>
              </svg>
            </button>
            <div class="flex">
              <a href="{% url 'dashboard' %}" class="hover:text-purple-400"
                >Dashboard</a
              >
            </div>
            {% endif %}
          </div>

          <!-- Auto dissapearing messages -->
          <div
            id="messages-container"
            class="fixed left-1/2 transform -translate-x-1/2 z-50 w-full max-w-md px-4"
          >
            <div class="w-full pt-2">
              {% for message in messages %}
              <div
                class="message px-4 py-3 rounded-md shadow-sm mb-2 flex items-center justify-between {% if message.tags == 'error' %} bg-red-100 border border-red-400 text-red-700 {% else %} bg-green-100 border border-green-400 text-green-700 {% endif %}"
                role="alert"
              >
                <span class="flex-grow">{{ message }}</span>
                <button
                  onclick="dismissMessage(this.parentNode)"
                  class="ml-4 focus:outline-none"
                >
                  <svg
                    class="h-5 w-5"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </button>
              </div>
              {% endfor %}
            </div>
          </div>

          <script>
            document.addEventListener("DOMContentLoaded", function () {
              const messages = document.querySelectorAll(
                "#messages-container .message"
              );
              messages.forEach((message) => {
                setTimeout(() => {
                  dismissMessage(message);
                }, 10000);
              });
            });

            function dismissMessage(messageElement) {
              messageElement.style.transition =
                "opacity 300ms, transform 300ms";
              messageElement.style.opacity = "0";
              messageElement.style.transform = "scale(0.9)";
              setTimeout(() => {
                messageElement.remove();
              }, 300);
            }
          </script>

          <!-- Right -->
          <div class="flex gap-x-6 px-6">
            {% block navright %} {% endblock navright %} {% if user.is_authenticated %}

            <!-- Notification component -->
            {% include "components/notification.html" %}

            <!-- Current user component -->
            {% include "components/current_user.html" %}
            {% endif %}
          </div>
        </div>
      </header>

      <main class="relative">
        <!-- Content | Below is dashboard only code -->
        <div class="flex h-screen bg-gray-200">
          <!-- Sidebar -->
          <div
            class="z-30 inset-y-0 left-0 w-56 transition duration-300 transform bg-gray-900 overflow-y-auto fixed top-14"
            :class="{'translate-x-0 ease-out': sidebarOpen, '-translate-x-full ease-in': !sidebarOpen}"
          >
            <!-- Sidebar content -->
            <a
              href="{% url 'calendar' %}"
              class="flex items-center mt-4 py-2 px-6 text-gray-300 hover:bg-gray-700 hover:bg-opacity-25 hover:text-gray-100"
            >
              <span class="mx-3">Home</span>
            </a>
            <a
              href="{% url 'user_profile' %}"
              class="flex items-center mt-4 py-2 px-6 text-gray-300 hover:bg-gray-700 hover:bg-opacity-25 hover:text-gray-100"
            >
              <span class="mx-3">Profile</span>
            </a>
            <a
              href="{% url 'settings' %}"
              class="flex items-center mt-4 py-2 px-6 text-gray-300 hover:bg-gray-700 hover:bg-opacity-25 hover:text-gray-100"
            >
              <span class="mx-3">Settings</span>
            </a>
            {% if user.user_type == 1 %}
            <a
              href="{% url 'student_invites' %}"
              class="flex items-center mt-4 py-2 px-6 text-gray-300 hover:bg-gray-700 hover:bg-opacity-25 hover:text-gray-100"
            >
              <span class="mx-3">View Invites</span>
            </a>

            <a
              href="{% url 'student_teachers' %}"
              class="flex items-center mt-4 py-2 px-6 text-gray-300 hover:bg-gray-700 hover:bg-opacity-25 hover:text-gray-100"
              ><span class="mx-3">My Teachers</span></a
            >

            <a
              href="{% url 'student_lesson_request' %}"
              class="flex items-center mt-4 py-2 px-6 text-gray-300 hover:bg-gray-700 hover:bg-opacity-25 hover:text-gray-100"
            >
              <span class="mx-3">Schedule with a teacher</span>
            </a>
            {% elif user.user_type == 2 %}
            <a
              href="{% url 'invite_student' %}"
              class="flex items-center mt-4 py-2 px-6 text-gray-300 hover:bg-gray-700 hover:bg-opacity-25 hover:text-gray-100"
              ><span class="mx-3">Invite Student</span></a
            >
            <a
              href="{% url 'teacher_students' %}"
              class="flex items-center mt-4 py-2 px-6 text-gray-300 hover:bg-gray-700 hover:bg-opacity-25 hover:text-gray-100"
              ><span class="mx-3">My Students</span></a
            >
            <a
              href="{% url 'teacher_lesson_request' %}"
              class="flex items-center mt-4 py-2 px-6 text-gray-300 hover:bg-gray-700 hover:bg-opacity-25 hover:text-gray-100"
            >
              <span class="mx-3">Schedule with a student</span>
            </a>
            {% endif %}
            {% block sidemenu %}{% endblock %}
          </div>

          <!-- Main content -->
          <div
            class="flex-1 flex flex-col overflow-hidden"
            :class="{'ml-64': sidebarOpen, 'ml-0': !sidebarOpen}"
          >
            <main
              class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-200 pt-14"
              role="main"
            >
              <div class="container mx-auto py-8">
                <h3 class="text-gray-700 text-3xl font-medium">
                  {% block name %}{% endblock %}
                </h3>
                <!-- Add dashboard content here... -->
                {% block content %}{% endblock %}
              </div>
            </main>
          </div>
        </div>
      </main>

      <footer></footer>
    </div>

    <script
      defer
      src="https://cdn.jsdelivr.net/npm/alpinejs@3.14.1/dist/cdn.min.js"
    ></script>
  </body>
</html>


# File: cs_nea/templates/index.html
{% extends "_base.html" %}

{% block content %}
<div class="">
  <div class="bg-gradient-to-b from-purple-500 to-blue-900">
    <div class="flex flex-col flex-auto items-center justify-center h-svh">
      <p class="p-5 text-5xl font-bold text-white">MusBook</p>
      <p class="text-xl text-white">Music lesson scheduling made easy</p>

      {% if not user.is_authenticated %}
      <div class="p-10">
        <a href="{% url 'student_login' %}" class="px-4">
          <button
            type="button"
            class="bg-neutral-700 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-neutral-800 hover:ring-2 hover:ring-neutral-500 shadow-lg"
          >
            Students
          </button>
        </a>
        <a href="{% url 'teacher_login' %}" class="px-4">
          <button
            type="button"
            class="bg-neutral-700 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-neutral-800 hover:ring-2 hover:ring-neutral-500 shadow-lg"
          >
            Teachers
          </button>
        </a>
      </div>
      {% endif %}
    </div>
  </div>
  
</div>
{% endblock content %}


# File: cs_nea/templates/dashboard/student_dashboard.html
{% extends "_dashboard.html" %} {% block name %} Student Dashboard {% endblock %} 

{% block content %}
<h2>Calendar</h2>
<div class="calendar">
  <h3>Lessons</h3>
  {% for lesson in lessons %}
  <div class="lesson">
    <p>
      {{ lesson.start_datetime|date:"F d, Y H:i" }} - {{
      lesson.end_datetime|date:"H:i" }}
    </p>
    <p>Student: {{ lesson.student }}</p>
    <p>Teacher: {{ lesson.teacher }}</p>
  </div>
  {% endfor %}

  <h3>Other Events</h3>
  {% for event in other_events %}
  <div class="other-event">
    <p>
      {{ event.start_datetime|date:"F d, Y H:i" }} - {{
      event.end_datetime|date:"H:i" }}
    </p>
    <p>Teacher: {{ event.teacher }}</p>
    <p>Description: {{ event.event_description }}</p>
  </div>
  {% endfor %}
</div>
{% endblock %}


# File: cs_nea/templates/dashboard/teacher_dashboard.html
{% extends "_dashboard.html" %} {% block name %} Teacher Dashboard {% endblock %} 
{% block content %}
<div class="pt-16">
  <h2>Calendar</h2>
  <div class="calendar">
    <h3>Lessons</h3>
    {% for lesson in lessons %}
    <div class="lesson">
      <p>
        {{ lesson.start_datetime|date:"F d, Y H:i" }} - {{
        lesson.end_datetime|date:"H:i" }}
      </p>
      <p>Student: {{ lesson.student }}</p>
      <p>Teacher: {{ lesson.teacher }}</p>
    </div>
    {% endfor %}

    <h3>Other Events</h3>
    {% for event in other_events %}
    <div class="other-event">
      <p>
        {{ event.start_datetime|date:"F d, Y H:i" }} - {{
        event.end_datetime|date:"H:i" }}
      </p>
      <p>Teacher: {{ event.teacher }}</p>
      <p>Description: {{ event.event_description }}</p>
    </div>
    {% endfor %}
  </div>
</div>
{% endblock %}


# File: cs_nea/templates/scheduling/calendar.html
{% extends "_dashboard.html" %}
{% load static %}

{% block content %}
<div class="container mx-auto px-4 py-8 h-screen flex flex-col">
    <h1 class="text-3xl font-bold mb-6 text-neutral-800">Calendar</h1>

    <div class="bg-white shadow-md rounded-lg overflow-hidden flex-grow flex flex-col">
        <div class="p-4 flex flex-col h-full" x-data="calendarData()">
            <div class="flex justify-between items-center mb-4">
                <button @click="previousPeriod()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Previous
                </button>
                <h2 class="text-xl font-semibold" x-text="currentPeriodName"></h2>
                <button @click="nextPeriod()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Next
                </button>
            </div>

            <div class="mb-4">
                <button @click="toggleView()" x-text="viewType === 'month' ? 'Switch to Week View' : 'Switch to Month View'" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                </button>
            </div>

            <div class="calendar-container flex-grow" x-html="calendarHtml"></div>
        </div>
    </div>
</div>

<script>
function calendarData() {
    return {
        currentDate: new Date(),
        calendarHtml: '',
        viewType: 'month',
        get currentPeriodName() {
            return `${this.currentDate.toLocaleString('default', { month: 'long', year: 'numeric' })}`;

        },
        async fetchCalendar() {
            const year = this.currentDate.getFullYear();
            const month = this.currentDate.getMonth() + 1;
            const week = this.getWeekNumberInMonth(this.currentDate);
            const response = await fetch(`/get_calendar_data?year=${year}&month=${month}&week=${week}&view_type=${this.viewType}`);
            const data = await response.json();
            this.calendarHtml = data.calendar_html;
        },
        previousPeriod() {
            if (this.viewType === 'month') {
                this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() - 1, 1);
            } else {
                this.currentDate.setDate(this.currentDate.getDate() - 7);
                if (this.getWeekNumberInMonth(this.currentDate) > 4) {
                    this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), 1);
                }
            }
            this.fetchCalendar();
        },
        nextPeriod() {
            if (this.viewType === 'month') {
                this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 1);
            } else {
                this.currentDate.setDate(this.currentDate.getDate() + 7);
                if (this.getWeekNumberInMonth(this.currentDate) > 4) {
                    this.currentDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 1);
                }
            }
            this.fetchCalendar();
        },
        toggleView() {
            this.viewType = this.viewType === 'month' ? 'week' : 'month';
            this.fetchCalendar();
        },
        getWeekNumberInMonth(d) {
            const firstDayOfMonth = new Date(d.getFullYear(), d.getMonth(), 1);
            const offsetDate = new Date(d.getTime());
            offsetDate.setDate(offsetDate.getDate() - firstDayOfMonth.getDay());
            return Math.ceil((d.getDate() + firstDayOfMonth.getDay()) / 7);
        },
        getOrdinal(n) {
            const s = ["th", "st", "nd", "rd"];
            const v = n % 100;
            return n + (s[(v - 20) % 10] || s[v] || s[0]);
        },
        init() {
            this.fetchCalendar();
        }
    }
}
</script>
{% endblock content %}

# File: cs_nea/templates/scheduling/teacher_schedule_lesson.html
{% extends "_dashboard.html" %}{% load widget_tweaks %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-4">Schedule or Request a Lesson</h1>
    <form method="post" class="space-y-4">
        {% csrf_token %}
        {% for field in form %}
            <div>
                <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-700">
                    {{ field.label }}
                </label>
                <div class="mt-1">
                    {% render_field field class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %}
                </div>
                {% if field.errors %}
                    {% for error in field.errors %}
                        <p class="mt-2 text-sm text-red-600">{{ error }}</p>
                    {% endfor %}
                {% endif %}
            </div>
        {% endfor %}
        <div>
            <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Submit
            </button>
        </div>
    </form>
</div>
{% endblock %}

# File: cs_nea/templates/scheduling/create_lesson.html
{% extends "_dashboard.html" %}

{% block content %}
<h2>Create a Lesson</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Create Lesson</button>
</form>
{% endblock %}

# File: cs_nea/templates/scheduling/student_schedule_lesson.html
{% extends "_dashboard.html" %}{% load widget_tweaks %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-4">Request a Lesson</h1>
    <form method="post" class="space-y-4">
        {% csrf_token %}
        {% for field in form %}
            <div>
                <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-700">
                    {{ field.label }}
                </label>
                <div class="mt-1">
                    {% render_field field class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %}
                </div>
                {% if field.errors %}
                    {% for error in field.errors %}
                        <p class="mt-2 text-sm text-red-600">{{ error }}</p>
                    {% endfor %}
                {% endif %}
            </div>
        {% endfor %}
        <div>
            <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Submit Request
            </button>
        </div>
    </form>
</div>
{% endblock %}

# File: cs_nea/templates/scheduling/create_other_event.html
{% extends "_dashboard.html" %}

{% endblock %}
{% block content %}
<h2>Create Other Event</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Create Event</button>
</form>
{% endblock %}

# File: cs_nea/templates/communications/chat_room.html
{% extends "_dashboard.html" %}

{% block content %}

<textarea id="chat-log" cols="100" rows="20"></textarea><br>
<input id="chat-message-input" type="text" size="100"><br>
<input id="chat-message-submit" type="button" value="Send">

<script>
    const roomName = {{ room_name_json }};

    const chatSocket = new WebSocket(
        'ws://' + window.location.host +
        '/ws/chat/' + roomName + '/'
    );

    chatSocket.onmessage = function(e) {
        const data = JSON.parse(e.data);
        document.querySelector('#chat-log').value += (data.message + '\n');
    };

    chatSocket.onclose = function(e) {
        console.error('Chat socket closed unexpectedly');
    };

    document.querySelector('#chat-message-input').focus();
    document.querySelector('#chat-message-input').onkeyup = function(e) {
        if (e.keyCode === 13) {  // enter, return
            document.querySelector('#chat-message-submit').click();
        }
    };

    document.querySelector('#chat-message-submit').onclick = function(e) {
        const messageInputDom = document.querySelector('#chat-message-input');
        const message = messageInputDom.value;
        chatSocket.send(JSON.stringify({
            'message': message
        }));
        messageInputDom.value = '';
    };
</script>

{% endblock %}

# File: cs_nea/templates/users/signup.html
{% extends "_base.html" %} {% load widget_tweaks %} {% block content %}

{% if request.path == "/student/signup" %}

  <!-- CHANGE TO FIT STUDENTS -->
  <form class="flex pt-28 justify-center" method="post">
    {% csrf_token %}
    <div class="flex flex-col gap-4 justify-center w-full max-w-md px-4">
      <div class="text-4xl font-semibold">Student Sign Up</div>
      
      {% if messages %}
        {% for message in messages %}
          <div class="px-4 py-3 {% if message.tags == 'error' %}bg-red-100 border border-red-400 text-red-700{% else %}bg-green-100 border border-green-400 text-green-700{% endif %} rounded" role="alert">
            {{ message }}
          </div>
        {% endfor %}
      {% endif %}

      {% if form.non_field_errors %}
        <div class="flex bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" role="alert">
          {% for error in form.non_field_errors %}
            <p>{{ error }}</p>
          {% endfor %}
        </div>
        {% endif %}

      {% for field in form %}
        <div class="w-full">
        <label class="text-neutral-800 text-sm font-bold" for="{{ field.id_for_label }}">
        {{ field.label }}
        </label>
        {% if field.name == 'contact_number' %}
          <div class="flex gap-2">
            {{ field|add_class:"w-full" }}
          </div>
        {% else %}
          {{ field|add_class:"shadow border rounded w-full text-gray-700 focus:border-purple-500" }}
        {% endif %}
        {% if field.errors %}
          {% for error in field.errors %}
            <p class="text-red-500 text-xs italic">{{ error }}</p>
          {% endfor %}
        {% endif %}
        </div>
      {% endfor %}

      <div>
        <input
          class="w-full bg-purple-500 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-purple-600 hover:ring-2 ring-purple-800"
          type="submit"
          value="Sign Up"
        />
      </div>
    </div>
  </form>
{% elif request.path == "/teacher/signup" %}
  <!-- CHANGE TO FIT TEACHERS-->
  <form class="flex pt-28 justify-center" method="post">
    {% csrf_token %}
    <div class="flex flex-col gap-4 justify-center w-full max-w-md px-4">
      <div class="text-4xl font-semibold">Teacher Sign Up</div>
      
      {% if messages %}
        {% for message in messages %}
          <div class="px-4 py-3 {% if message.tags == 'error' %}bg-red-100 border border-red-400 text-red-700{% else %}bg-green-100 border border-green-400 text-green-700{% endif %} rounded" role="alert">
            {{ message }}
          </div>
        {% endfor %}
      {% endif %}

      {% if form.non_field_errors %}
        <div class="flex bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" role="alert">
          {% for error in form.non_field_errors %}
            <p>{{ error }}</p>
          {% endfor %}
        </div>
        {% endif %}

      {% for field in form %}
        <div class="w-full">
        <label class="text-neutral-800 text-sm font-bold" for="{{ field.id_for_label }}">
        {{ field.label }}
        </label>
        {% if field.name == 'contact_number' %}
          <div class="flex gap-2">
            {{ field|add_class:"w-full" }}
          </div>
        {% else %}
          {{ field|add_class:"shadow border rounded w-full text-gray-700 focus:border-purple-500" }}
        {% endif %}
        {% if field.errors %}
          {% for error in field.errors %}
            <p class="text-red-500 text-xs italic">{{ error }}</p>
          {% endfor %}
        {% endif %}
        </div>
      {% endfor %}

      <div>
        <input
          class="w-full bg-purple-500 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-purple-600 hover:ring-2 ring-purple-800"
          type="submit"
          value="Sign Up"
        />
      </div>
    </div>
  </form>
{% endif %}

{% endblock content %} 
{% block navright %}
  {% if request.path == "/student/signup" %}
    <a href="{% url 'student_login' %}">
      <button
        type="button"
        class="bg-neutral-700 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-neutral-800 hover:ring-2 ring-neutral-500"
      >
        Log in
      </button>
    </a>
    <a href="{% url 'student_signup' %}">
      <button
        type="button"
        class="bg-purple-500 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-purple-600 hover:ring-2 ring-purple-800"
      >
        Sign up
      </button>
    </a>
    {% endif %}
  {% if request.path == "/teacher/signup" %}
    <a href="{% url 'teacher_login' %}">
      <button
        type="button"
        class="bg-neutral-700 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-neutral-800 hover:ring-2 ring-neutral-500"
      >
        Log in
      </button>
    </a>
    <a href="{% url 'teacher_signup' %}">
      <button
        type="button"
        class="bg-purple-500 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-purple-600 hover:ring-2 ring-purple-800"
      >
        Sign up
      </button>
    </a>
  {% endif %}
{% endblock navright %}


# File: cs_nea/templates/users/password_reset.html
{% extends "_base.html" %}
{% load widget_tweaks %}

{% block content %}
<div class="flex pt-28 justify-center" x-data="{ isLoading: false }">
  <div class="flex flex-col gap-4 justify-center w-full max-w-md px-4">
    <div class="text-4xl font-semibold">Reset Your Password</div>
    
    {% if messages %}
      {% for message in messages %}
        <div class="px-4 py-3 {% if message.tags == 'error' %}bg-red-100 border border-red-400 text-red-700{% else %}bg-green-100 border border-green-400 text-green-700{% endif %} rounded" role="alert">
          <span class="block sm:inline">{{ message }}</span>
        </div>
      {% endfor %}
    {% endif %}

    <form method="post" @submit="isLoading = true">
      {% csrf_token %}
      {% for field in form %}
        <div class="mb-4">
          <label class="block text-neutral-800 text-sm font-bold mb-2" for="{{ field.id_for_label }}">
            {{ field.label }}
          </label>
          {{ field|add_class:"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" }}
          {% if field.errors %}
            {% for error in field.errors %}
              <p class="text-red-500 text-xs italic">{{ error }}</p>
            {% endfor %}
          {% endif %}
        </div>
      {% endfor %}
      <div class="flex items-center justify-between">
        <button class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit" :disabled="isLoading">
          <span x-show="!isLoading">Reset Password</span>
          <span x-show="isLoading" class="inline-flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Resetting...
          </span>
        </button>
      </div>
    </form>
  </div>
</div>
{% endblock content %}

# File: cs_nea/templates/users/account_recovery.html
{% extends "_base.html" %}
{% load widget_tweaks %}

{% block content %}
<div class="flex pt-28 justify-center" x-data="{ isLoading: false }">
  <div class="flex flex-col gap-4 justify-center w-full max-w-md px-4">
    <div class="text-4xl font-semibold">Account Recovery</div>
    
    {% if messages %}
      {% for message in messages %}
        <div class="px-4 py-3 {% if message.tags == 'error' %}bg-red-100 border border-red-400 text-red-700{% else %}bg-green-100 border border-green-400 text-green-700{% endif %} rounded" role="alert">
          <span class="block sm:inline">{{ message }}</span>
        </div>
      {% endfor %}
    {% endif %}

    <form method="post" @submit="isLoading = true">
      {% csrf_token %}
      {% for field in form %}
        <div class="mb-4">
          <label class="block text-neutral-800 text-sm font-bold mb-2" for="{{ field.id_for_label }}">
            {{ field.label }}
          </label>
          {{ field|add_class:"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" }}
          {% if field.errors %}
            {% for error in field.errors %}
              <p class="text-red-500 text-xs italic">{{ error }}</p>
            {% endfor %}
          {% endif %}
        </div>
      {% endfor %}
      <div class="flex items-center justify-between">
        <button class="bg-purple-500 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit" :disabled="isLoading">
          <span x-show="!isLoading">Recover Account</span>
          <span x-show="isLoading" class="inline-flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Processing...
          </span>
        </button>
      </div>
    </form>
  </div>
</div>
{% endblock content %}

# File: cs_nea/templates/users/settings.html
<!-- users/templates/users/settings.html -->
{% extends "_dashboard.html" %}
{% load widget_tweaks %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <h2 class="text-3xl font-semibold mb-6">User Settings</h2>
    
    {% if messages %}
    <div class="mb-4">
        {% for message in messages %}
        <div class="p-4 {% if message.tags == 'success' %}bg-green-100 text-green-700{% elif message.tags == 'error' %}bg-red-100 text-red-700{% else %}bg-blue-100 text-blue-700{% endif %} rounded">
            {{ message }}
        </div>
        {% endfor %}
    </div>
    {% endif %}
    
    <form method="post" class="space-y-4">
        {% csrf_token %}
        
        {% for field in form %}
        <div>
            <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-700">
                {{ field.label }}
            </label>
            <div class="mt-1">
                {% if field.name == 'two_factor_enabled' %}
                    {{ field|add_class:"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded" }}
                {% else %}
                    {{ field|add_class:"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" }}
                {% endif %}
            </div>
            {% if field.help_text %}
            <p class="mt-2 text-sm text-gray-500">{{ field.help_text }}</p>
            {% endif %}
            {% for error in field.errors %}
            <p class="mt-2 text-sm text-red-600">{{ error }}</p>
            {% endfor %}
        </div>
        {% endfor %}
        
        <div>
            <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Save Changes
            </button>
        </div>
    </form>
</div>
{% endblock %}

# File: cs_nea/templates/users/account_recovery_2fa.html
{% extends "_base.html" %}
{% load widget_tweaks %}

{% block content %}
<div class="flex pt-28 justify-center" x-data="{ isLoading: false }">
  <div class="flex flex-col gap-4 justify-center w-full max-w-md px-4">
    <div class="text-4xl font-semibold">Two-Factor Authentication</div>
    <p class="text-neutral-600">Please enter the 6-digit code sent to your email.</p>
    
    {% if messages %}
      {% for message in messages %}
        <div class="px-4 py-3 {% if message.tags == 'error' %}bg-red-100 border border-red-400 text-red-700{% else %}bg-green-100 border border-green-400 text-green-700{% endif %} rounded" role="alert">
          <span class="block sm:inline">{{ message }}</span>
        </div>
      {% endfor %}
    {% endif %}

    <form method="post" @submit="isLoading = true">
      {% csrf_token %}
      {% for field in form %}
        <div class="mb-4">
          <label class="block text-neutral-800 text-sm font-bold mb-2" for="{{ field.id_for_label }}">
            {{ field.label }}
          </label>
          {{ field|add_class:"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" }}
          {% if field.errors %}
            {% for error in field.errors %}
              <p class="text-red-500 text-xs italic">{{ error }}</p>
            {% endfor %}
          {% endif %}
        </div>
      {% endfor %}
      <div class="flex items-center justify-between">
        <button class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit" :disabled="isLoading">
          <span x-show="!isLoading">Verify</span>
          <span x-show="isLoading" class="inline-flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Verifying...
          </span>
        </button>
      </div>
    </form>
  </div>
</div>
{% endblock content %}

# File: cs_nea/templates/users/login.html
{% extends "_base.html" %} {% load widget_tweaks %} 

{% block content %}
<form class="flex pt-28 justify-center" method="post">
    {% csrf_token %}
    <div class="flex flex-col gap-4 justify-center w-full max-w-md px-4">
        {% if request.path == "/student/login" %}
        <div class="text-4xl font-semibold">Student Log In</div>
        {% else %}
        <div class="text-4xl font-semibold">Teacher Log In</div>
        {% endif %} {% if form.non_field_errors %}
        <div
            class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
            role="alert"
        >
            {% for error in form.non_field_errors %}
            <p>{{ error }}</p>
            {% endfor %}
        </div>
        {% endif %} {% for field in form %}
        <div class="w-full">
            <label
                class="text-neutral-800 text-sm font-bold"
                for="{{ field.id_for_label }}"
            >
                {{ field.label }}
            </label>
            {{ field|add_class:"shadow border rounded w-full text-gray-700 focus:border-purple-500" }} 
            {% if field.errors %} {% for error in field.errors %}
            <p class="text-red-500 text-xs italic">{{ error }}</p>
            {% endfor %} {% endif %}
        </div>
        {% endfor %}
        <div>
            <a
                href="{% url 'account_recovery' %}"
                class="text-neutral-800 hover:underline text-sm font-semibold"
                >Forgot password?</a
            >
        </div>
        <div>
            <input
                class="bg-purple-500 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-purple-600 hover:ring-2 ring-purple-800 w-full"
                type="submit"
                value="Log In"
            />
        </div>
    </div>
</form>
{% endblock content %} 


{% block navright %} 
<!-- Student specific login and signups -->
{% if 'student/login' in request.path %}
<a href="{% url 'student_login' %}">
    <button
        type="button"
        class="bg-neutral-700 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-neutral-800 hover:ring-2 ring-neutral-500"
    >
        Log in
    </button>
</a>
<a href="{% url 'student_signup' %}">
    <button
        type="button"
        class="bg-purple-500 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-purple-600 hover:ring-2 ring-purple-800"
    >
        Sign up
    </button>
</a>
<!-- Teacher specific login and signups -->
{% elif 'teacher/login' in request.path %}
<a href="{% url 'teacher_login' %}">
    <button
        type="button"
        class="bg-neutral-700 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-neutral-800 hover:ring-2 ring-neutral-500"
    >
        Log in
    </button>
</a>
<a href="{% url 'teacher_signup' %}">
    <button
        type="button"
        class="bg-purple-500 text-white font-medium rounded-lg px-5 py-2.5 hover:bg-purple-600 hover:ring-2 ring-purple-800"
    >
        Sign up
    </button>
</a>
{% endif %} {% endblock navright %}


# File: cs_nea/templates/users/profile.html
{% extends "_dashboard.html" %}

{% block content %}
  <div class="flex flex-col gap-4 justify-center w-full max-w-md px-4">
    <div class="text-4xl font-semibold">Profile</div>
    <div class="flex flex-col gap-4">
      <div class="flex flex-col gap-2">
        <div class="text-lg font-semibold">Name</div>
        <div>{{ user.first_name }} {{ user.last_name }}</div>
      </div>
      <div class="flex flex-col gap-2">
        <div class="text-lg font-semibold">Email</div>
        <div>{{ user.email }}</div>
      </div>
      <div class="flex flex-col gap-2">
        <div class="text-lg font-semibold">Contact Number</div>
        <div>{{ user.contact_number }}</div>
      </div>
    </div>
  </div>
{% endblock content %}

# File: cs_nea/templates/users/two_factor_verify.html
{% extends "_base.html" %}
{% load widget_tweaks %}

{% block content %}
<div class="flex pt-28 justify-center" x-data="{ isLoading: false }">
  <div class="flex flex-col gap-4 justify-center w-full max-w-md px-4">
    <div class="text-4xl font-semibold">Two-Factor Authentication</div>
    
    {% if messages %}
      {% for message in messages %}
        <div class="px-4 py-3 {% if message.tags == 'error' %}bg-red-100 border border-red-400 text-red-700{% else %}bg-green-100 border border-green-400 text-green-700{% endif %} rounded" role="alert">
          <span class="block sm:inline">{{ message }}</span>
        </div>
      {% endfor %}
    {% endif %}

    <form method="post" @submit="isLoading = true">
      {% csrf_token %}
      {% for field in form %}
        <div class="mb-4">
          <label class="block text-neutral-800 text-sm font-bold mb-2" for="{{ field.id_for_label }}">
            {{ field.label }}
          </label>
          {{ field|add_class:"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" }}
          {% if field.errors %}
            {% for error in field.errors %}
              <p class="text-red-500 text-xs italic">{{ error }}</p>
            {% endfor %}
          {% endif %}
        </div>
      {% endfor %}
      <div class="flex items-center justify-between">
        <button class="bg-purple-500 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit" :disabled="isLoading">
          <span x-show="!isLoading">Verify</span>
          <span x-show="isLoading" class="inline-flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Processing...
          </span>
        </button>
      </div>
    </form>
  </div>
</div>
{% endblock content %}


# File: cs_nea/templates/users/student_templates/student_teachers.html
{% extends "dashboard/student_dashboard.html" %}

{% block content %}
<h2>My Teachers</h2>
{% if teachers %}
    <ul>
    {% for teacher in teachers %}
        <li>
            {{ teacher.user.get_full_name }} ({{ teacher.user.email }})
            <p>Extra Info: {{ teacher.extra_teacher_info }}</p>
        </li>
    {% endfor %}
    </ul>
{% else %}
    <p>You don't have any teachers yet.</p>
{% endif %}
{% endblock %}

# File: cs_nea/templates/users/student_templates/student_invites.html
{% extends "dashboard/student_dashboard.html" %}

{% block content %}
<h2>Pending Invites</h2>
{% if invites %}
    <ul>
    {% for invite in invites %}
        <li>
            Invite from 
            {% if invite.teacher.user %}
                {{ invite.teacher.user.get_full_name }}
            {% else %}
                Unknown Teacher
            {% endif %}
            <p>{{ invite.message }}</p>
            <a href="{% url 'accept_invite' invite.id %}">Accept</a>
        </li>
    {% endfor %}
    </ul>
{% else %}
    <p>No pending invites.</p>
{% endif %}
{% endblock %}

# File: cs_nea/templates/users/teacher_templates/teacher_students.html
{% extends "dashboard/teacher_dashboard.html" %}

{% block content %}
<h2>My Students</h2>
{% if students %}
    <ul>
    {% for student in students %}
        <li>
            {{ student.user.get_full_name }} ({{ student.user.email }})
            <p>Grade: {{ student.grade_level }}</p>
            <p>Extra Info: {{ student.extra_student_info }}</p>
        </li>
    {% endfor %}
    </ul>
{% else %}
    <p>You don't have any students yet.</p>
{% endif %}
<a href="{% url 'invite_student' %}">Invite New Student</a>
{% endblock %}



# File: cs_nea/templates/users/teacher_templates/invite_student.html
{% extends "dashboard/teacher_dashboard.html" %}

{% block content %}
<h2>Invite Student</h2>
<form method="post">
    {% csrf_token %}
    {{ form.non_field_errors }}
    <div class="form-group">
        {{ form.student_email.errors }}
        <label for="{{ form.student_email.id_for_label }}">Student's Email:</label>
        {{ form.student_email }}
    </div>
    <div class="form-group">
        {{ form.message.errors }}
        <label for="{{ form.message.id_for_label }}">Message (optional):</label>
        {{ form.message }}
    </div>
    <button type="submit">Send Invite</button>
</form>
{% endblock %}

# File: cs_nea/templates/components/notification.html
{% load static %}
<div x-data="notificationComponent()" class="relative inline-block text-left mr-4">
    <button @click="toggleNotifications" class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-purple-500 text-white focus:outline-none">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
        </svg>
    </button>

    <div x-show="isOpen" @click.away="isOpen = false" class="origin-top-right absolute right-0 mt-2 w-80 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
        <div class="py-1 max-h-80 overflow-y-auto" role="none">
            <template x-for="notification in notifications" :key="notification.id">
                <div class="flex items-center px-4 py-3 hover:bg-gray-100">
                    <div class="flex-grow">
                        <p x-text="notification.content" class="text-sm text-gray-700"></p>
                        <p x-text="notification.timestamp" class="text-xs text-gray-500"></p>
                    </div>
                    <button @click="dismissNotification(notification.id)" class="ml-2 text-gray-400 hover:text-gray-600">
                        <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </template>
            <div x-show="notifications.length === 0" class="px-4 py-3 text-sm text-gray-700">
                No new notifications
            </div>
        </div>
    </div>
</div>

<script>
function notificationComponent() {
    return {
        isOpen: false,
        notifications: [],
        toggleNotifications() {
            this.isOpen = !this.isOpen;
            if (this.isOpen) {
                this.fetchNotifications();
            }
        },
        fetchNotifications() {
            fetch('/communications/get-notifications/')
                .then(response => response.json())
                .then(data => {
                    this.notifications = data;
                });
        },
        dismissNotification(id) {
            fetch(`/communications/mark-notification-read/${id}/`, {
                method: 'POST',
                headers: {
                    'X-CSRFToken': getCookie('csrftoken'),
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    this.notifications = this.notifications.filter(n => n.id !== id);
                }
            });
        }
    }
}

function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}
</script>

# File: cs_nea/templates/components/current_user.html
{% load static %}
<div x-data="{ open: false }" class="relative inline-block text-left mr-4">
    <div>
        <button
            @click="open = !open"
            type="button"
            class="inline-flex justify-center w-full rounded-md shadow-sm px-4 py-2 bg-purple-500 text-sm font-medium text-white hover:bg-purple-600 ring-purple-800"
            id="options-menu"
            aria-haspopup="true"
            x-bind:aria-expanded="open"
        >
            {{ user.first_name }} {{ user.last_name }}
            <svg
                class="-mr-1 ml-2 h-5 w-5"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
            >
                <path
                    fill-rule="evenodd"
                    d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                    clip-rule="evenodd"
                />
            </svg>
        </button>
    </div>

    <div
        x-show="open"
        @click.away="open = false"
        class="origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-neutral-100"
    >
        <div
            class="py-1"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="options-menu"
        >
            <a
                href="{% url 'settings' %}"
                class="block px-4 py-2 text-sm hover:bg-neutral-200 text-neutral-800"
                role="menuitem"
                >Settings</a
            >
            <a
                href="{% url 'user_profile' %}"
                class="block px-4 py-2 text-sm hover:bg-neutral-200 text-neutral-800"
                role="menuitem"
                >Profile</a
            >
            <a
                href="{% url 'logout' %}"
                class="block px-4 py-2 text-sm hover:bg-neutral-200 text-neutral-800"
                role="menuitem"
                >Log out</a
            >
        </div>
    </div>
</div>


# File: cs_nea/dashboard/admin.py
from django.contrib import admin

# Register your models here.


# File: cs_nea/dashboard/views.py
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required, user_passes_test
from communications.models import Notification

# Predefined functions to check user type
def is_student(user):
    return user.user_type == 1


def is_teacher(user):
    return user.user_type == 2


# Dashboard redirect to teacher or student dashboard
@login_required
def dashboard(request):
    notifications = Notification.objects.filter(
        receiver=request.user, is_read=False
    ).order_by("-timestamp")[:20]

    context = {
        "notifications": notifications,
    }

    if request.user.user_type == 1:  # Student
        return render(request, "dashboard/student_dashboard.html", context)
    elif request.user.user_type == 2:  # Teacher
        return render(request, "dashboard/teacher_dashboard.html", context)
    else:
        # Handle unexpected user type
        return redirect("home")


@login_required
@user_passes_test(is_student)
def student_dashboard(request):
    # Student-specific dashboard logic
    return render(request, "dashboard/student_dashboard.html")


@login_required
@user_passes_test(is_teacher)
def teacher_dashboard(request):
    # Teacher-specific dashboard logic
    return render(request, "dashboard/teacher_dashboard.html")


# File: cs_nea/dashboard/__init__.py


# File: cs_nea/dashboard/apps.py
from django.apps import AppConfig


class DashboardConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'dashboard'


# File: cs_nea/dashboard/models.py
from django.db import models

# Create your models here.


# File: cs_nea/dashboard/tests.py
from django.test import TestCase

# Create your tests here.


# File: cs_nea/dashboard/urls.py
from django.urls import path
from .views import dashboard, student_dashboard, teacher_dashboard   

urlpatterns = [
    path("dashboard", dashboard, name="dashboard"),
    path('student/dashboard/', student_dashboard, name='student_dashboard'),
    path('teacher/dashboard/', teacher_dashboard, name='teacher_dashboard'),
]


# File: cs_nea/scheduling/admin.py
from django.contrib import admin

# Register your models here.


# File: cs_nea/scheduling/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required, user_passes_test
from django.http import JsonResponse
from datetime import date
from .forms import StudentLessonRequestForm, TeacherLessonRequestForm, OtherEventForm, LessonForm
from .models import Student, Teacher, Lesson, OtherEvent, LessonRequest
from .calendar_utils import LessonCalendar
from communications.models import Notification


# Predefined functions to check user type
def is_student(user):
    return user.user_type == 1

def is_teacher(user):
    return user.user_type == 2

# Student lesson request form
@login_required
@user_passes_test(is_student)
def student_lesson_request(request):
    if request.method == "POST":
        form = StudentLessonRequestForm(request.POST)
        if form.is_valid():
            lesson_request = form.save(commit=False)
            lesson_request.student = request.user.student
            lesson_request.save()
            
            if lesson_request.teacher.user.notification_preferences.lesson_requests:
                Notification.objects.create(
                    receiver=lesson_request.teacher.user,
                    content=f"New lesson request from {request.user.get_full_name()}"
                )
            
            messages.success(request, "Lesson request submitted successfully!")
            return redirect("dashboard")
    else:
        form = StudentLessonRequestForm()

    return render(request, "scheduling/student_schedule_lesson.html", {"form": form})

# Teacher lesson request form
@login_required
@user_passes_test(is_teacher)
def teacher_lesson_request(request):
    if request.method == "POST":
        form = TeacherLessonRequestForm(request.POST)
        if form.is_valid():
            lesson_request = form.save(commit=False)
            lesson_request.teacher = request.user.teacher
            lesson_request.is_sent_by_teacher = True
            
            if form.cleaned_data['send_request']:
                lesson_request.save()
                if lesson_request.student.user.notification_preferences.lesson_requests:
                    Notification.objects.create(
                        receiver=lesson_request.student.user,
                        content=f"New lesson request from {request.user.get_full_name()}"
                    )
                messages.success(request, "Lesson request sent to student.")
            else:
                lesson = Lesson.objects.create(
                    student=lesson_request.student,
                    teacher=request.user.teacher,
                    start_datetime=lesson_request.requested_datetime,
                    end_datetime=lesson_request.requested_datetime + lesson_request.duration,
                    is_recurring=lesson_request.is_recurring
                )
                if lesson_request.student.user.notification_preferences.lessons:
                    Notification.objects.create(
                        receiver=lesson_request.student.user,
                        content=f"New lesson scheduled with {request.user.get_full_name()}"
                    )
                messages.success(request, "Lesson scheduled successfully.")
            
            return redirect("dashboard")
    else:
        form = TeacherLessonRequestForm()

    return render(request, "scheduling/teacher_schedule_lesson.html", {"form": form})

# Create lesson view
def create_lesson(request):
    if request.method == "POST":
        form = LessonForm(request.POST)
        if form.is_valid():
            lesson = form.save(commit=False)
            lesson.student = Student.objects.get(
                user=request.user
            )  # Assuming the logged-in user is a student
            lesson.save()
            messages.success(request, "Lesson created successfully!")
            return redirect("lesson_list")  # Redirect to a list of lessons or dashboard
    else:
        form = LessonForm()

    return render(request, "scheduling/create_lesson.html", {"form": form})


# Create other event view
def create_other_event(request):
    if request.method == "POST":
        form = OtherEventForm(request.POST)
        if form.is_valid():
            event = form.save(commit=False)
            event.teacher = Teacher.objects.get(
                user=request.user
            )  # Assuming the logged-in user is a teacher
            event.save()
            messages.success(request, "Event created successfully!")
            return redirect("dashboard")  # Redirect to a list of events or dashboard
    else:
        form = OtherEventForm()

    return render(request, "scheduling/create_other_event.html", {"form": form})






# Calendar views
@login_required
def calendar_view(request):
    return render(request, 'scheduling/calendar.html')

# Calendar refresh view
@login_required
def get_calendar_data(request):
    year = int(request.GET.get('year'))
    month = int(request.GET.get('month'))
    view_type = request.GET.get('view_type', 'month')
    
    # Fetch events for the entire month
    start_date = date(year, month, 1)
    end_date = date(year, month + 1, 1) if month < 12 else date(year + 1, 1, 1)
    
    lessons = Lesson.objects.filter(
        start_datetime__gte=start_date,
        start_datetime__lt=end_date
    )
    other_events = OtherEvent.objects.filter(
        start_datetime__gte=start_date,
        start_datetime__lt=end_date
    )
    
    if view_type == 'month':
        cal = LessonCalendar(year, month, lessons=lessons, other_events=other_events)
        html_cal = cal.formatmonth(withyear=True)
    else:  # week view
        week = int(request.GET.get('week', 1))
        cal = LessonCalendar(year, month, week, lessons=lessons, other_events=other_events)
        html_cal = cal.formatweek_view()
    
    return JsonResponse({'calendar_html': html_cal})

# File: cs_nea/scheduling/__init__.py


# File: cs_nea/scheduling/apps.py
from django.apps import AppConfig


class SchedulingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'scheduling'


# File: cs_nea/scheduling/models.py
from django.db import models
from django.core.exceptions import ValidationError
from django.utils import timezone
from datetime import timedelta
from users.models import Student, Teacher

# Lesson request model, used to request a lesson with a teacher
class LessonRequest(models.Model):
    request_id = models.AutoField(primary_key=True)
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    requested_datetime = models.DateTimeField()
    is_approved = models.BooleanField(default=False)
    is_rescheduling = models.BooleanField()
    original_lesson = models.ForeignKey('Lesson', on_delete=models.SET_NULL, null=True, blank=True)
    request_reason = models.CharField(max_length=255)
    duration = models.DurationField()
    recurring_amount = models.IntegerField()
    
    # Additional fields from iteration 2
    is_sent_by_teacher = models.BooleanField(default=False)
    is_recurring = models.BooleanField(default=False)

    def clean(self):
        if self.requested_datetime <= timezone.now():
            raise ValidationError("Requested datetime must be in the future.")
        if not self.request_reason.strip():
            raise ValidationError("Request reason cannot be empty or just whitespace.")
        if self.duration < timedelta(minutes=15) or self.duration > timedelta(hours=3):
            raise ValidationError("Duration must be between 15 minutes and 3 hours.")
        if self.is_recurring and (self.recurring_amount < 1 or self.recurring_amount > 52):
            raise ValidationError("For recurring lessons, recurring amount must be between 1 and 52.")

# Lesson model, used store scheduled lessons
class Lesson(models.Model):
    lesson_id = models.AutoField(primary_key=True)
    student = models.ForeignKey(Student, on_delete=models.CASCADE)
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    request = models.ForeignKey(LessonRequest, on_delete=models.SET_NULL, null=True)
    start_datetime = models.DateTimeField()
    student_attendance = models.BooleanField()
    end_datetime = models.DateTimeField()

    def clean(self):
        if self.start_datetime <= timezone.now():
            raise ValidationError("Start datetime must be in the future.")
        if self.end_datetime <= self.start_datetime:
            raise ValidationError("End datetime must be after the start datetime.")

# Other event model, used to schedule events that are not lessons
class OtherEvent(models.Model):
    event_id = models.AutoField(primary_key=True)
    teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE)
    start_datetime = models.DateTimeField()
    end_datetime = models.DateTimeField()
    event_description = models.CharField(max_length=255)
    recurring_amount = models.IntegerField()

    def clean(self):
        if self.start_datetime <= timezone.now():
            raise ValidationError("Start datetime must be in the future.")
        if self.end_datetime <= self.start_datetime:
            raise ValidationError("End datetime must be after the start datetime.")
        if not self.event_description.strip():
            raise ValidationError("Event description cannot be empty or just whitespace.")
        if self.recurring_amount < 1 or self.recurring_amount > 52:
            raise ValidationError("Recurring amount must be between 1 and 52.")

# File: cs_nea/scheduling/forms.py
from django import forms
from .models import LessonRequest, Lesson, OtherEvent
from django.utils import timezone
from datetime import timedelta
from users.models import Teacher, Student

# Lesson request form for students
class StudentLessonRequestForm(forms.ModelForm):
    teacher = forms.ModelChoiceField(queryset=Teacher.objects.all())

    class Meta:
        model = LessonRequest
        fields = ['teacher', 'requested_datetime', 'request_reason', 'duration', 'is_recurring', 'recurring_amount']
        widgets = {
            'requested_datetime': forms.DateTimeInput(attrs={'type': 'datetime-local'}),
            'duration': forms.TimeInput(attrs={'type': 'time'}),
        }

# Lesson request form for teachers
class TeacherLessonRequestForm(forms.ModelForm):
    student = forms.ModelChoiceField(queryset=Student.objects.all())
    send_request = forms.BooleanField(required=False, initial=True)

    class Meta:
        model = LessonRequest
        fields = ['student', 'requested_datetime', 'request_reason', 'duration', 'is_recurring', 'recurring_amount']
        widgets = {
            'requested_datetime': forms.DateTimeInput(attrs={'type': 'datetime-local'}),
            'duration': forms.TimeInput(attrs={'type': 'time'}),
        }
    
# Corresponding Django form for the Lesson model
class LessonForm(forms.ModelForm):
    class Meta:
        model = Lesson
        fields = ['student', 'teacher', 'start_datetime', 'end_datetime', 'student_attendance']

    def clean(self):
        cleaned_data = super().clean()
        start_datetime = cleaned_data.get('start_datetime')
        end_datetime = cleaned_data.get('end_datetime')

        if start_datetime and start_datetime <= timezone.now():
            raise forms.ValidationError("Start datetime must be in the future.")
        if start_datetime and end_datetime and end_datetime <= start_datetime:
            raise forms.ValidationError("End datetime must be after the start datetime.")

# Corresponding Django form for the OtherEvent model
class OtherEventForm(forms.ModelForm):
    class Meta:
        model = OtherEvent
        fields = ['teacher', 'start_datetime', 'end_datetime', 'event_description', 'recurring_amount']

    def clean(self):
        cleaned_data = super().clean()
        start_datetime = cleaned_data.get('start_datetime')
        end_datetime = cleaned_data.get('end_datetime')
        event_description = cleaned_data.get('event_description')
        recurring_amount = cleaned_data.get('recurring_amount')

        if start_datetime and start_datetime <= timezone.now():
            raise forms.ValidationError("Start datetime must be in the future.")
        if start_datetime and end_datetime and end_datetime <= start_datetime:
            raise forms.ValidationError("End datetime must be after the start datetime.")
        if not event_description or not event_description.strip():
            raise forms.ValidationError("Event description cannot be empty or just whitespace.")
        if recurring_amount and (recurring_amount < 1 or recurring_amount > 52):
            raise forms.ValidationError("Recurring amount must be between 1 and 52.")

# File: cs_nea/scheduling/tests.py
from django.test import TestCase

# Create your tests here.


# File: cs_nea/scheduling/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path("create_lesson", views.create_lesson, name="create_lesson"),
    path("create_other_event", views.create_other_event, name="create_other_event"),
    path("calendar/", views.calendar_view, name="calendar"),
    path('get_calendar_data/', views.get_calendar_data, name='get_calendar_data'),
    
    path('student/request_lesson/', views.student_lesson_request, name='student_lesson_request'),
    path('teacher/request_lesson/', views.teacher_lesson_request, name='teacher_lesson_request'),
]




# File: cs_nea/scheduling/calendar_utils.py
from calendar import HTMLCalendar, weekheader
from datetime import date, timedelta
from .models import Lesson, OtherEvent
from django.utils import timezone

class LessonCalendar(HTMLCalendar):
    def __init__(self, year=None, month=None, week=None, lessons=None, other_events=None):
        self.year = year
        self.month = month
        self.week = week
        self.lessons = lessons or []
        self.other_events = other_events or []
        super(LessonCalendar, self).__init__()

    def formatday(self, day, weekday):
        if day == 0:
            return '<td class="p-2 border border-gray-200 bg-gray-100"></td>'
        
        today = timezone.now().date()   
        try:
            date_obj = date(self.year, self.month, day)
        except ValueError:
            return '<td class="p-2 border border-gray-200 bg-gray-100"></td>'
        
        classes = ['p-2', 'border', 'border-gray-200', 'align-top']
        if date_obj == today:
            classes.append('bg-yellow-100')
        elif date_obj < today:
            classes.append('bg-gray-50')
        
        lessons_for_day = [lesson for lesson in self.lessons if lesson.start_datetime.date() == date_obj]
        events_for_day = [event for event in self.other_events if event.start_datetime.date() == date_obj]
        
        d = f"<td class='{' '.join(classes)}'>"
        d += f"<div class='flex flex-col h-full'>"
        d += f"<span class='text-sm font-semibold mb-1'>{day}</span>"
        d += "<div class='flex-grow'>"
        for lesson in lessons_for_day:
            d += f'<div class="text-xs p-1 bg-purple-200 rounded mb-1">{lesson.start_datetime.strftime("%H:%M")} - Lesson</div>'
        for event in events_for_day:
            d += f'<div class="text-xs p-1 bg-blue-200 rounded mb-1">{event.start_datetime.strftime("%H:%M")} - {event.event_description}</div>'
        d += "</div></div></td>"
        return d
    
    def formatweek(self, theweek):
        week = ''
        for d, weekday in theweek:
            week += self.formatday(d, weekday)
        return f'<tr>{week}</tr>'

    def formatmonth(self, withyear=True):
        cal = f'<table class="calendar table-auto w-full border-collapse h-full">\n'
        cal += f'{self.formatmonthname(self.year, self.month, withyear=withyear)}\n'
        cal += f'{self.formatweekheader()}\n'
        for week in self.monthdays2calendar(self.year, self.month):
            cal += f'{self.formatweek(week)}\n'
        return cal
    
    def formatweek_view(self):
        month_calendar = self.monthdays2calendar(self.year, self.month)
        week_dates = month_calendar[self.week - 1]

        cal = f'<table class="calendar table-auto w-full border-collapse h-full">\n'
        cal += f'<tr><th colspan="7">{date(self.year, self.month, 1).strftime("%B %Y")} - Week {self.week}</th></tr>\n'
        
        # Add day names
        cal += '<tr>'
        for day_name in weekheader(7).split():  # Use weekheader() function directly
            cal += f'<th class="p-2 border border-gray-200">{day_name}</th>'    
        cal += '</tr>\n'
    
        # Add day numbers
        cal += '<tr>'
        for day, weekday in week_dates:
            if day != 0:
                cal += f'<th class="p-2 border border-gray-200">{day}</th>'
            else:
                cal += '<th class="p-2 border border-gray-200"></th>'
        cal += '</tr>\n'
        
        # Add events (without day numbers in the cells)
        cal += '<tr class="h-full">'
        for day, weekday in week_dates:
            if day != 0:
                date_obj = date(self.year, self.month, day)
                lessons_for_day = [lesson for lesson in self.lessons if lesson.start_datetime.date() == date_obj]
                events_for_day = [event for event in self.other_events if event.start_datetime.date() == date_obj]
                
                classes = ['p-2', 'border', 'border-gray-200', 'align-top']
                if date_obj == timezone.now().date():
                    classes.append('bg-yellow-100')
                elif date_obj < timezone.now().date():
                    classes.append('bg-gray-50')
                
                d = f"<td class='{' '.join(classes)}'>"
                d += "<div class='flex flex-col h-full'>"
                for lesson in lessons_for_day:
                    d += f'<div class="text-xs p-1 bg-purple-200 rounded mb-1">{lesson.start_datetime.strftime("%H:%M")} - Lesson</div>'
                for event in events_for_day:
                    d += f'<div class="text-xs p-1 bg-blue-200 rounded mb-1">{event.start_datetime.strftime("%H:%M")} - {event.event_description}</div>'
                d += "</div></td>"
                cal += d
            else:
                cal += '<td class="p-2 border border-gray-200 bg-gray-100"></td>'
        cal += '</tr>\n'
        
        cal += '</table>'
        return cal

# File: cs_nea/communications/views.py
from django.http import JsonResponse
from django.shortcuts import render
from django.views.decorators.http import require_POST
from django.contrib.auth.decorators import login_required
from .models import Notification

# Notification views - only JSON responses
@login_required
def get_notifications(request):
    notifications = Notification.objects.filter(receiver=request.user, is_read=False).order_by('-timestamp')[:20]
    data = [{
        'id': notif.id,
        'content': notif.content,
        'timestamp': notif.timestamp.strftime('%Y-%m-%d %H:%M')
    } for notif in notifications]
    return JsonResponse(data, safe=False)

@require_POST
@login_required
def mark_notification_read(request, notification_id):
    try:
        notification = Notification.objects.get(id=notification_id, receiver=request.user)
        notification.is_read = True
        notification.save()
        return JsonResponse({'status': 'success'})
    except Notification.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Notification not found'}, status=404)
    
# Real time messaging view
@login_required
def chat_room(request, room_name):
    return render(request, 'chat_room.html', {
        'room_name': room_name
    })

# File: cs_nea/communications/consumers.py
import json
from channels.generic.websocket import AsyncWebsocketConsumer

# Code for asyncronous websocket real time messaging
class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        self.room_group_name = f'chat_{self.room_name}'

        # Join room group
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        await self.accept()

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    # Receive message from WebSocket
    async def receive(self, text_data):
        text_data_json = json.loads(text_data)
        message = text_data_json['message']

        # Send message to room group
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message
            }
        )

    # Receive message from room group
    async def chat_message(self, event):
        message = event['message']

        # Send message to WebSocket
        await self.send(text_data=json.dumps({
            'message': message
        }))

# File: cs_nea/communications/__init__.py


# File: cs_nea/communications/apps.py
from django.apps import AppConfig


class CommunicationsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'communications'


# File: cs_nea/communications/models.py
from django.db import models
from django.contrib.auth import get_user_model

# Linking to user models in other app
User = get_user_model()


# Notification config and settings model
class NotificationConfig(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    receive_notification = models.BooleanField(default=True)
    lesson_reminder = models.BooleanField(default=True)
    assignment_notification = models.BooleanField(default=True)
    message_notification = models.BooleanField(default=True)
    attendance_notification = models.BooleanField(default=True)
    t2r_requests = models.BooleanField(default=True)
    cancellation_notification = models.BooleanField(default=True)


# Notification model
class Notification(models.Model):
    receiver = models.ForeignKey(
        User, related_name="received_notifications", on_delete=models.CASCADE
    )
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    is_read = models.BooleanField(default=False)

    class Meta:
        ordering = ["-timestamp"]

    def __str__(self):
        return f"Notification for {self.receiver.username}: {self.content[:50]}..."


# Message model
class Message(models.Model):
    sender = models.ForeignKey(
        User, related_name="sent_messages", on_delete=models.CASCADE
    )
    receiver = models.ForeignKey(
        User, related_name="received_messages", on_delete=models.CASCADE
    )
    message_content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    is_edited = models.BooleanField(default=False)


# Message config and settings model
class MessageConfig(models.Model):
    student = models.ForeignKey(
        User, related_name="student_message_config", on_delete=models.CASCADE
    )
    teacher = models.ForeignKey(
        User, related_name="teacher_message_config", on_delete=models.CASCADE
    )
    read_only = models.BooleanField(default=False)


# File: cs_nea/communications/routing.py
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/chat/(?P<room_name>\w+)/$', consumers.ChatConsumer.as_asgi()),
]

# File: cs_nea/communications/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('get-notifications/', views.get_notifications, name='get_notifications'),
    path('mark-notification-read/<int:notification_id>/', views.mark_notification_read, name='mark_notification_read'),
]



# File: cs_nea/users/admin.py
from django.contrib import admin

# Register your models here.


# File: cs_nea/users/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login as auth_login, logout as auth_logout
from django.contrib import messages
from django.core.mail import send_mail
from django.utils import timezone
from django.urls import reverse
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib.auth import update_session_auth_hash
from django.db import transaction
from datetime import timedelta
from .forms import (
    LoginForm,
    SignupForm,
    StudentSignupForm,
    TeacherSignupForm,
    TwoFactorForm,
    RetrieveAccountForm,
    PasswordResetRequestForm,
    PasswordResetForm,
    UserSettingsForm,
    InviteForm,
)
from .models import Student, Teacher, User, Invite


def index(request):
    return render(request, "index.html")


def login(request):
    if request.method == "POST":
        form = LoginForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data.get("email")
            password = form.cleaned_data.get("password")
            user = authenticate(request, username=email, password=password)
            if user is not None:
                if user.two_factor_enabled:
                    user.generate_two_factor_code()
                    send_two_factor_code(user)
                    request.session["user_id"] = user.id
                    return redirect("two_factor_verify")
                else:
                    auth_login(request, user)
                    messages.success(request, "You have successfully logged in.")
                    return redirect("dashboard")
            else:
                messages.error(request, "Invalid email or password")
    else:
        form = LoginForm()

    return render(request, "users/login.html", {"form": form})


# 2 factor authentication views
def two_factor_verify(request):
    user_id = request.session.get("user_id")
    if not user_id:
        return redirect("index")

    user = User.objects.get(id=user_id)

    if request.method == "POST":
        form = TwoFactorForm(request.POST)
        if form.is_valid():
            code = form.cleaned_data.get("code")
            if (
                user.two_factor_code == code
                and user.two_factor_code_expiry > timezone.now()
            ):
                auth_login(request, user)
                user.two_factor_code = None
                user.two_factor_code_expiry = None
                user.save()
                messages.success(request, "You have successfully logged in.")
                return redirect("dashboard")
            else:
                messages.error(request, "Invalid or expired code")
    else:
        form = TwoFactorForm()

    return render(request, "users/two_factor_verify.html", {"form": form})


def account_recovery(request):
    if request.method == "POST":
        form = RetrieveAccountForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data.get("email")
            try:
                user = User.objects.get(email=email)
                send_password_reset_link(request, user)
                messages.success(
                    request, "A password reset link has been sent to your email."
                )
                return redirect("index")
            except User.DoesNotExist:
                messages.error(request, "No account found with this email address.")
    else:
        form = RetrieveAccountForm()

    return render(request, "users/account_recovery.html", {"form": form})


def send_two_factor_code(user):
    subject = "Your Two-Factor Authentication Code"
    message = f"Your two-factor authentication code is: {user.two_factor_code}"
    send_mail(subject, message, "noreply@example.com", [user.email])


# Account retrieval views
def password_reset_request(request):
    if request.method == "POST":
        form = PasswordResetRequestForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data.get("email")
            try:
                user = User.objects.get(email=email)
                user.generate_password_reset_token()
                send_password_reset_link(request, user)
                messages.success(
                    request, "A password reset link has been sent to your email."
                )
                return redirect("index")
            except User.DoesNotExist:
                messages.error(request, "No account found with this email address.")
    else:
        form = PasswordResetRequestForm()

    return render(request, "users/password_reset_request.html", {"form": form})


def password_reset(request, token):
    user = get_object_or_404(User, password_reset_token=token)

    # Check if the token has expired (e.g., after 24 hours)
    if user.password_reset_token_created_at < timezone.now() - timedelta(hours=24):
        messages.error(
            request, "The password reset link has expired. Please request a new one."
        )
        return redirect("password_reset_request")

    if request.method == "POST":
        form = PasswordResetForm(request.POST)
        if form.is_valid():
            new_password = form.cleaned_data.get("new_password")
            user.set_password(new_password)
            user.password_reset_token = None
            user.password_reset_token_created_at = None
            user.save()
            messages.success(request, "Your password has been reset successfully.")
            return redirect("index")
    else:
        form = PasswordResetForm()

    return render(request, "users/password_reset.html", {"form": form})


@login_required
def enable_disable_2fa(request):
    user = request.user
    if request.method == "POST":
        form = EnableDisable2FAForm(request.POST)
        if form.is_valid():
            enable_2fa = form.cleaned_data.get("enable_2fa")
            user.two_factor_enabled = enable_2fa
            user.save()
            if enable_2fa:
                messages.success(request, "Two-factor authentication has been enabled.")
            else:
                messages.success(
                    request, "Two-factor authentication has been disabled."
                )
            return redirect("settings")
    else:
        form = EnableDisable2FAForm(initial={"enable_2fa": user.two_factor_enabled})

    return render(request, "users/enable_disable_2fa.html", {"form": form})


def send_password_reset_link(request, user):
    user.generate_password_reset_token()
    reset_link = request.build_absolute_uri(
        reverse("password_reset", args=[user.password_reset_token])
    )
    subject = "Password Reset Link"
    message = f"Click the following link to reset your password: {reset_link}"
    send_mail(subject, message, "noreply@example.com", [user.email])




def signup(request):
    if request.path == "/student/signup":
        form_class = StudentSignupForm
        user_type = 1
    elif request.path == "/teacher/signup":
        form_class = TeacherSignupForm
        user_type = 2
    else:
        return redirect("index")

    if request.method == "POST":
        form = form_class(request.POST)
        if form.is_valid():
            try:
                with transaction.atomic():
                    user = form.save(commit=False)
                    user.set_password(form.cleaned_data["password"])
                    user.user_type = user_type
                    user.save()

                    if user_type == 1:  # Student
                        Student.objects.create(
                            user=user,
                            grade_level=form.cleaned_data["grade_level"],
                            extra_student_info=form.cleaned_data.get("extra_student_info", "")
                        )
                    elif user_type == 2:  # Teacher
                        Teacher.objects.create(
                            user=user,
                            extra_teacher_info=form.cleaned_data.get("extra_teacher_info", "")
                        )

                messages.success(request, "Your account has been successfully created!")
                return redirect("student_login" if user_type == 1 else "teacher_login")
            except Exception as e:
                messages.error(request, f"An error occurred during signup: {str(e)}")
        else:
            messages.error(request, "Please correct the errors below.")
    else:
        form = form_class()

    return render(request, "users/signup.html", {"form": form})


def logout(request):
    auth_logout(request)
    return redirect("index")


def profile(request):
    return render(request, "users/profile.html")


@login_required
def settings(request):
    user = request.user
    if request.method == "POST":
        form = UserSettingsForm(request.POST, instance=user)
        if form.is_valid():
            if form.cleaned_data.get("new_password"):
                if user.check_password(form.cleaned_data.get("current_password")):
                    user.set_password(form.cleaned_data.get("new_password"))
                    update_session_auth_hash(request, user)  # Keep the user logged in
                    messages.success(request, "Your password has been updated.")
                else:
                    messages.error(request, "Current password is incorrect.")
                    return render(request, "users/settings.html", {"form": form})

            form.save()
            messages.success(request, "Your settings have been updated.")
            return redirect("settings")
    else:
        form = UserSettingsForm(instance=user)

    return render(request, "users/settings.html", {"form": form})


@login_required
@user_passes_test(lambda u: u.user_type == 2)
def invite_student(request):
    teacher = request.user.teacher
    if request.method == "POST":
        form = InviteForm(request.POST, teacher=teacher)
        if form.is_valid():
            student_email = form.cleaned_data["student_email"]
            message = form.cleaned_data["message"]
            
            student_user = User.objects.get(email=student_email, user_type=1)
            student = student_user.student

            invite, created = Invite.objects.get_or_create(
                student=student,
                teacher=teacher,
                defaults={"message": message, "status": "pending"},
            )

            if created:
                messages.success(request, f"Invite sent to {student_email}")
            else:
                messages.info(request, f"Invite already sent to {student_email}")

            return redirect("teacher_dashboard")
    else:
        form = InviteForm(teacher=teacher)

    return render(request, "users/teacher_templates/invite_student.html", {"form": form})

@login_required
@user_passes_test(lambda u: u.user_type == 1)
def student_invites(request):
    student = request.user.student
    pending_invites = Invite.objects.filter(student=student, status="pending")
    return render(request, "users/student_templates/student_invites.html", {"invites": pending_invites})


@login_required
@user_passes_test(lambda u: u.user_type == 1)
def accept_invite(request, invite_id):
    invite = get_object_or_404(
        Invite, id=invite_id, student=request.user.student, status="pending"
    )
    invite.status = "accepted"
    invite.save()
    messages.success(
        request, f"You are now connected with {invite.teacher.user.get_full_name()}"
    )
    return redirect("student_dashboard")


@login_required
@user_passes_test(lambda u: u.user_type == 2)
def teacher_students(request):
    teacher = request.user.teacher
    accepted_invites = Invite.objects.filter(teacher=teacher, status="accepted")
    students = [invite.student for invite in accepted_invites]
    return render(request, "users/teacher_templates/teacher_students.html", {"students": students})


@login_required
@user_passes_test(lambda u: u.user_type == 1)
def student_teachers(request):
    student = request.user.student
    accepted_invites = Invite.objects.filter(student=student, status="accepted")
    teachers = [invite.teacher for invite in accepted_invites]
    return render(request, "users/student_templates/student_teachers.html", {"teachers": teachers})


# File: cs_nea/users/__init__.py


# File: cs_nea/users/apps.py
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'


# File: cs_nea/users/models.py
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager
from django.core.validators import RegexValidator, EmailValidator, MinLengthValidator
from phonenumber_field.modelfields import PhoneNumberField
from django.utils import timezone
from django.utils.crypto import get_random_string


# Create your models here.
class UserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email field must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user


class User(AbstractBaseUser):
    # User types
    USER_TYPE_CHOICES = (
        (1, "Student"),
        (2, "Teacher"),
    )
    user_type = models.PositiveSmallIntegerField(
        choices=USER_TYPE_CHOICES,
        default=1,
    )

    email = models.EmailField(
        "email address",
        max_length=255,
        unique=True,
        validators=[EmailValidator(message="Enter a valid email address.")],
    )
    first_name = models.CharField(
        "first name",
        max_length=150,
        validators=[
            RegexValidator(r"^[a-zA-Z\s]+$", "Enter a valid first name (letters only).")
        ],
    )
    last_name = models.CharField(
        "last name",
        max_length=150,
        validators=[
            RegexValidator(r"^[a-zA-Z\s]+$", "Enter a valid last name (letters only).")
        ],
    )
    password = models.CharField(
        "password",
        max_length=255,
        validators=[
            MinLengthValidator(6),
            RegexValidator(
                r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{6,}$",
                "Password must have at least 6 characters, including a number and a capital letter.",
            ),
        ],
    )

    contact_number = PhoneNumberField()

    date_of_birth = models.DateField("date of birth")

    # Two-factor authentication fields
    two_factor_enabled = models.BooleanField(default=False)
    two_factor_code = models.CharField(max_length=6, blank=True, null=True)
    two_factor_code_expiry = models.DateTimeField(blank=True, null=True)
    password_reset_token = models.CharField(max_length=100, null=True, blank=True)
    password_reset_token_created_at = models.DateTimeField(null=True, blank=True)

    objects = UserManager()

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["__all__"]

    # Account authentication and retrival methods
    def generate_password_reset_token(self):
        self.password_reset_token = get_random_string(length=32)
        self.password_reset_token_created_at = timezone.now()
        self.save()

    def generate_two_factor_code(self):
        self.two_factor_code = get_random_string(length=6, allowed_chars="0123456789")
        self.two_factor_code_expiry = timezone.now() + timezone.timedelta(minutes=10)
        self.save()
        
    # Full name quick access method
    def get_full_name(self):
        return f"{self.first_name} {self.last_name}"
    
    # First name quick access method
    def get_first_name(self):
        return self.first_name

    # String representation of the user - method is used for all Django models below
    def __str__(self):
        return self.email


class Teacher(models.Model):
    teacher_id = models.AutoField(primary_key=True)
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    extra_teacher_info = models.TextField(
        "extra / optional teacher information",
        max_length=2000,
        blank=True,  # This field is optional
        null=True,
    )
    
    def __str__(self):
        return f"{self.user.get_first_name()} ({self.user.email})"



class Student(models.Model):
    student_id = models.AutoField(primary_key=True)
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    extra_student_info = models.TextField(
        "extra / optional student information",
        max_length=2000,
        blank=True,  # This field is optional
        null=True,
    )
    grade_level = models.IntegerField(
        "grade level",
        validators=[
            RegexValidator(r"^\d+$", "Enter a valid grade level between 1 and 12.")
        ],
    )
    
    def __str__(self):
        return f"{self.user.get_first_name()} ({self.user.email})"



class Invite(models.Model):
    INVITE_STATUS_CHOICES = (
        ("pending", "Pending"),
        ("accepted", "Accepted"),
        ("declined", "Declined"),
    )

    student = models.ForeignKey(
        Student, on_delete=models.CASCADE, related_name="invites"
    )
    teacher = models.ForeignKey(
        Teacher, on_delete=models.CASCADE, related_name="sent_invites"
    )
    status = models.CharField(
        max_length=10, choices=INVITE_STATUS_CHOICES, default="pending"
    )
    message = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ("student", "teacher")

    def __str__(self):
        return f"Invite from {self.teacher} to {self.student} ({self.status})"


# File: cs_nea/users/forms.py
from django import forms
from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import ValidationError
from .models import User, Student, Teacher, Invite

from phonenumber_field.formfields import SplitPhoneNumberField


class LoginForm(forms.Form):
    email = forms.EmailField()
    password = forms.CharField(widget=forms.PasswordInput())


class SignupForm(forms.ModelForm):
    confirm_password = forms.CharField(widget=forms.PasswordInput())
    contact_number = SplitPhoneNumberField()

    class Meta:
        model = User
        fields = [
            "first_name",
            "last_name",
            "email",
            "password",
            "confirm_password",
            "contact_number",
            "date_of_birth",
        ]
        widgets = {
            "password": forms.PasswordInput(),
            "date_of_birth": forms.DateInput(format="%Y-%m-%d", attrs={"type": "date"}),
        }

    def clean(self):
        cleaned_data = super().clean()
        password = cleaned_data.get("password")
        confirm_password = cleaned_data.get("confirm_password")

        if password and confirm_password:
            if password != confirm_password:
                raise ValidationError("Passwords do not match")
            try:
                validate_password(password)
            except forms.ValidationError as error:
                self.add_error("password", error)

        return cleaned_data

    def clean_email(self):
        email = self.cleaned_data.get("email")
        if User.objects.filter(email=email).exists():
            raise ValidationError("Email already exists")
        return email

    def clean_date_of_birth(self):
        date_of_birth = self.cleaned_data.get("date_of_birth")
        if date_of_birth:
            from datetime import date

            age = (date.today() - date_of_birth).days // 365
            if age < 10:
                raise ValidationError(
                    "You must be at least 10 years old to register. Please have your parent or guardian register for you."
                )
        return date_of_birth


class StudentSignupForm(SignupForm):
    grade_level = forms.IntegerField(
        min_value=1,
        max_value=12,
        widget=forms.NumberInput(attrs={"class": "form-control"}),
        help_text="Enter a grade level between 1 and 12.",
        label="Grade Level",
    )
    extra_student_info = forms.CharField(
        widget=forms.Textarea(attrs={"rows": 3, "class": "form-control"}),
        required=False,
        label="Extra Information About You (Optional)",
    )

    class Meta(SignupForm.Meta):
        model = User
        fields = SignupForm.Meta.fields + ["grade_level", "extra_student_info"]


class TeacherSignupForm(SignupForm):
    extra_teacher_info = forms.CharField(
        widget=forms.Textarea(attrs={"rows": 3, "class": "form-control"}),
        required=False,
        label="Extra Information About You (Optional)",
    )

    class Meta(SignupForm.Meta):
        model = User
        fields = SignupForm.Meta.fields + ["extra_teacher_info"]


# 2 factor authentication form
class TwoFactorForm(forms.Form):
    code = forms.CharField(
        max_length=6,
        min_length=6,
        widget=forms.TextInput(attrs={"autocomplete": "off"}),
    )


# Account retrieval forms
class RetrieveAccountForm(forms.Form):
    email = forms.EmailField()


class PasswordResetRequestForm(forms.Form):
    email = forms.EmailField()


class PasswordResetForm(forms.Form):
    new_password = forms.CharField(
        widget=forms.PasswordInput(), validators=[validate_password]
    )
    confirm_password = forms.CharField(widget=forms.PasswordInput())

    def clean(self):
        cleaned_data = super().clean()
        new_password = cleaned_data.get("new_password")
        confirm_password = cleaned_data.get("confirm_password")

        if new_password and confirm_password:
            if new_password != confirm_password:
                raise forms.ValidationError("Passwords do not match")

        return cleaned_data


# FIXME: Some fields should be greyed out and non-editable
class UserSettingsForm(forms.ModelForm):
    current_password = forms.CharField(widget=forms.PasswordInput(), required=False)
    new_password = forms.CharField(widget=forms.PasswordInput(), required=False, validators=[validate_password])
    confirm_new_password = forms.CharField(widget=forms.PasswordInput(), required=False)
    
    class Meta:
        model = User
        fields = ['first_name', 'last_name', 'email', 'contact_number', 'two_factor_enabled']
        
    def clean(self):
        cleaned_data = super().clean()
        current_password = cleaned_data.get("current_password")
        new_password = cleaned_data.get("new_password")
        confirm_new_password = cleaned_data.get("confirm_new_password")
        
        if new_password:
            if not current_password:
                raise forms.ValidationError("Current password is required to set a new password")
            if new_password != confirm_new_password:
                raise forms.ValidationError("New passwords do not match")
        
        return cleaned_data
    
# Invite form
class InviteForm(forms.Form):
    student_email = forms.EmailField(label="Student's Email")
    message = forms.CharField(widget=forms.Textarea, max_length=500, required=False)

    def __init__(self, *args, **kwargs):
        self.teacher = kwargs.pop('teacher', None)
        super(InviteForm, self).__init__(*args, **kwargs)

    def clean_student_email(self):
        email = self.cleaned_data['student_email']
        try:
            user = User.objects.get(email=email, user_type=1)  # 1 is for Student
            student = user.student
            
            # Check if an invite from this teacher already exists
            existing_invite = Invite.objects.filter(student=student, teacher=self.teacher).first()
            if existing_invite:
                if existing_invite.status == "accepted":
                    raise ValidationError("You are already connected with this student.")
                elif existing_invite.status == "pending":
                    raise ValidationError("You have already sent an invite to this student.")
        except User.DoesNotExist:
            raise ValidationError("No student account found with this email address.")
        return email




# File: cs_nea/users/urls.py
# users/urls.py

from django.urls import path
from .views import (
    index,
    login,
    signup,
    logout,
    profile,
    settings,
    two_factor_verify,
    account_recovery,
    password_reset_request,
    password_reset,
    invite_student,
    student_invites,
    accept_invite,
    teacher_students,
    student_teachers,
)

urlpatterns = [
    path("", index, name="index"),
    path("logout", logout, name="logout"),
    path("student/login", login, name="student_login"),
    path("teacher/login", login, name="teacher_login"),
    path("student/signup", signup, name="student_signup"),
    path("teacher/signup", signup, name="teacher_signup"),
    path("profile", profile, name="user_profile"),
    path("settings", settings, name="settings"),
    # URL for two-factor authentication verification before login, only if 2FA activated in settings
    path("two_factor_verify", two_factor_verify, name="two_factor_verify"),
    path("account_recovery", account_recovery, name="account_recovery"),
    path(
        "password_reset_request", password_reset_request, name="password_reset_request"
    ),
    # Password reset token is passed as a URL parameter, URL only accessed through emailed link
    path('password_reset/<str:token>/', password_reset, name='password_reset'),
    
    # Invite related URLs
    path('invite_student/', invite_student, name='invite_student'),
    path('student_invites/', student_invites, name='student_invites'),
    path('accept_invite/<int:invite_id>/', accept_invite, name='accept_invite'),
    path('teacher_students/', teacher_students, name='teacher_students'),
    path('student_teachers/', student_teachers, name='student_teachers'),
]


# File: cs_nea/cs_nea/asgi.py
import os
from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
import communication.routing  # you'll create this in step 6

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cs_nea.settings')

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AuthMiddlewareStack(
        URLRouter(
            communication.routing.websocket_urlpatterns
        )
    ),
})

# File: cs_nea/cs_nea/__init__.py


# File: cs_nea/cs_nea/settings.py
"""
Django settings for cs_nea project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-z&kc3iy^14wh+aj5q7@rt7mxnwr&^xj=3#*(g8o-uh8$-a-q=4"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    
    # Additional apps for real time messaging - these two must come before staticfiles
    "daphne",
    "channels",
    
    "django.contrib.staticfiles",
    # Additional apps
    "tailwind",
    "theme",
    "django_browser_reload",
    "widget_tweaks",
    "phonenumber_field",
    
    # My django apps
    "users",
    "dashboard",
    "scheduling",
    "communications",    
]

AUTH_USER_MODEL = "users.User"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    # Automatic page refreshes
    "django_browser_reload.middleware.BrowserReloadMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "cs_nea.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Path to the templates folder
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "cs_nea.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

TAILWIND_APP_NAME = "theme"

INTERNAL_IPS = [
    "127.0.0.1",
]

LOGIN_URL = "index"
LOGIN_REDIRECT_URL = "dashboard"

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Replace with your SMTP server address
EMAIL_PORT = 587  # Replace with your SMTP port number
EMAIL_USE_TLS = True  # Set to True if your SMTP server requires TLS
EMAIL_HOST_USER = 'zhaojin.chu07@gmail.com'  # Replace with your SMTP username
EMAIL_HOST_PASSWORD = 'wxwk ximf qxzy oiyl'  # Replace with your SMTP password
DEFAULT_FROM_EMAIL = 'zhaojin.chu07@gmail.com'  # Replace with your default from email address

# Settings for real time messaging
ASGI_APPLICATION = "cs_nea.asgi.application"

# Uses the in-memory channel layer  
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# File: cs_nea/cs_nea/wsgi.py
"""
WSGI config for cs_nea project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cs_nea.settings')

application = get_wsgi_application()


# File: cs_nea/cs_nea/urls.py
"""
URL configuration for cs_nea project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", include("users.urls")),
    path("", include("dashboard.urls")),
    path("", include("scheduling.urls")),
    path("communications/", include("communications.urls")),
    path("__reload__/", include("django_browser_reload.urls")),
    
]
